%config IPcompleter.greedy = True
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Importing the dataset
dataset = pd.read_csv('XXX.csv')
x = dataset[['X', 'Y']] # the columns we want to use for clustering

#Using elbow method to find the appropriate number of clusters
#this is one statistical technique, and might not always work. Many a times, some business case should also be made for this.
from sklearn.cluster import KMeans
wcss =[]
for i in range(1,11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state =0)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)

plt.plot (range(1,11), wcss)
plt.title ('Number of Clusters')
plt.xlabel ('Number of Clusters')
plt.ylabel ('WCSS')
plt.show()

#Applying right number of Clusters
### based on the elbow method, 'N' clusters seems appropriate because the elbow is formed at that point
kmeans = KMeans (n_clusters = N, init = 'k-means++', max_iter = 300, n_init =10, random_state = 0)
x['cluster'] = kmeans.fit_predict(x)

#Visualizing Clusters when two dimensional data
plt.scatter(x['X'][x['cluster']==0],x['Y'][x['cluster']==0], s=50,c='red',label = 'LABEL1')
plt.scatter(x['X'][x['cluster']==1],x['Y'][x['cluster']==1], s=50,c='blue',label = 'LABEL2')
plt.scatter(x['X'][x['cluster']==2],x['Y'][x['cluster']==2], s=50,c='green',label = 'LABEL3')
plt.scatter(x['X'][x['cluster']==3],x['Y'][x['cluster']==3], s=50,c='grey',label = 'LABEL4')
plt.scatter(x['X'][x['cluster']==4],x['Y'][x['cluster']==4], s=50,c='magenta',label = 'LABEL5')
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s = 100, c='black',label = 'Centriods')
plt.title ('Cluster')
plt.xlabel('X')
plt.ylabel ('Y')
plt.legend()
plt.show()
